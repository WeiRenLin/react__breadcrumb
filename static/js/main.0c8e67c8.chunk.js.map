{"version":3,"sources":["logo.svg","routes.js","page.js","components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","routes","path","component","location","className","locationPath","pathname","exact","breadcrumbName","onMatchedRoutes","matchedRoutes","route","renderRoutes","Breadcrumb","matchRoutes","map","matchRoute","i","key","to","Navbar","src","logo","alt","width","height","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","App","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c8e67c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Home, Books, Electronics, Mobile, Desktop, Laptop } from './page';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    component: Home,\r\n    exact: true,\r\n    breadcrumbName: 'Home'\r\n  },\r\n  {\r\n    path: '/books',\r\n    component: Books,\r\n    breadcrumbName: 'Book'\r\n  },\r\n  {\r\n    path: '/electronics',\r\n    component: Electronics,\r\n    breadcrumbName: 'Electronics',\r\n    routes: [\r\n      {\r\n        path: '/electronics/mobile',\r\n        component: Mobile,\r\n        breadcrumbName: 'Mobile Phone'\r\n      },\r\n      {\r\n        path: '/electronics/desktop',\r\n        component: Desktop,\r\n        breadcrumbName: 'Desktop PC'\r\n      },\r\n      {\r\n        path: '/electronics/laptop',\r\n        component: Laptop,\r\n        breadcrumbName: 'Laptop'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\nimport { renderRoutes  } from 'react-router-config';\r\nimport { Breadcrumb } from './components';\r\n\r\n/**\r\n * These are root pages\r\n */\r\nconst Home = ({ location }) => {\r\n  return(\r\n      <div>\r\n          <h1 className=\"py-3\">Home</h1>\r\n        <Breadcrumb locationPath={location.pathname} />   \r\n      </div>\r\n  );\r\n};\r\n\r\nconst Books = ({ location }) => {\r\n    const onMatchedRoutes = (matchedRoutes) => {\r\n      return [\r\n        {\r\n          route: {\r\n            path: '/',\r\n            breadcrumbName: 'Home'\r\n          }\r\n        },\r\n        ...matchedRoutes\r\n      ];\r\n    };\r\n    return (\r\n        <div>\r\n          <h1 className=\"py-3\">Books</h1>\r\n          <Breadcrumb\r\n            locationPath={location.pathname}\r\n            onMatchedRoutes={onMatchedRoutes}\r\n          />\r\n        </div>\r\n      );\r\n}\r\nconst Electronics = ({route,location }) => {\r\n    // let matchedRoutes = matchRoutes(routes, location.pathname);\r\n    // matchedRoutes = [\r\n    //     {\r\n    //       route: {\r\n    //         path: '/',\r\n    //         breadcrumbName: 'Home'\r\n    //       }\r\n    //     },\r\n    //     ...matchedRoutes\r\n    //   ];\r\n    const onMatchedRoutes = (matchedRoutes) => {\r\n        return [\r\n          {\r\n            route: {\r\n              path: '/',\r\n              breadcrumbName: 'Home'\r\n            }\r\n          },\r\n          ...matchedRoutes\r\n        ];\r\n      };\r\n    return (\r\n        <div>\r\n          <h1 className=\"py-3\">Electronics</h1>\r\n    \r\n          <Breadcrumb  \r\n          locationPath={location.pathname}\r\n           onMatchedRoutes={onMatchedRoutes}\r\n            />\r\n    \r\n          {renderRoutes(route.routes)}\r\n        </div>\r\n      );\r\n};\r\n\r\n/**\r\n * These are pages nested in Electronics\r\n */\r\nconst Mobile = () => {\r\n  return <h3>Mobile Phone</h3>;\r\n};\r\n\r\nconst Desktop = () => {\r\n  return <h3>Desktop PC</h3>;\r\n};\r\n\r\nconst Laptop = () => {\r\n  return <h3>Laptop</h3>;\r\n};\r\n\r\nexport { Home, Books, Electronics, Mobile, Desktop, Laptop };","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { matchRoutes  } from 'react-router-config';\r\nimport logo from './logo.svg';\r\nimport routes from './routes';\r\nconst Breadcrumb = ({locationPath , onMatchedRoutes}) => {\r\n  let matchedRoutes = matchRoutes(routes, locationPath);\r\n\r\n  if (typeof onMatchedRoutes === 'function') {\r\n    matchedRoutes = onMatchedRoutes(matchedRoutes);\r\n  }\r\n  return (\r\n     <nav>\r\n     <ol className=\"breadcrumb\">\r\n       {matchedRoutes.map((matchRoute, i) => {\r\n         const { path, breadcrumbName } = matchRoute.route;\r\n         const isActive = path === locationPath;\r\n         return isActive ? (\r\n             <li key={i} className=\"breadcrumb-item active\">\r\n               {breadcrumbName}\r\n             </li>\r\n           ) : (\r\n             <li key={i} className=\"breadcrumb-item\">\r\n               <Link to={path}>{breadcrumbName} </Link>\r\n             </li>\r\n           );\r\n       })}\r\n     </ol>\r\n   </nav>\r\n  );\r\n};\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        <img src={logo} alt=\"react-router-breadcrumb\" width=\"30\" height=\"30\" />\r\n      </Link>\r\n\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarContent\"\r\n        aria-controls=\"navbarContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarContent\">\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/\">\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/books\">\r\n              Books\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item dropdown\">\r\n            <Link\r\n              className=\"nav-link dropdown-toggle\"\r\n              to=\"/electronics\"\r\n              id=\"navbarDropdownMenuLink\"\r\n              role=\"button\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              Electronics\r\n            </Link>\r\n            <div\r\n              className=\"dropdown-menu\"\r\n              aria-labelledby=\"navbarDropdownMenuLink\"\r\n            >\r\n              <Link className=\"dropdown-item\" to=\"/electronics/mobile\">\r\n                Mobile Phone\r\n              </Link>\r\n              <Link className=\"dropdown-item\" to=\"/electronics/desktop\">\r\n                Desktop PC\r\n              </Link>\r\n              <Link className=\"dropdown-item\" to=\"/electronics/laptop\">\r\n                Laptop\r\n              </Link>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport { Navbar ,Breadcrumb};","import React, { Component } from 'react';\nimport { Navbar } from './components';\nimport routes from './routes';\nimport {renderRoutes} from 'react-router-config'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Navbar />\n\n        {/* Refactor for using routes config */}\n        {renderRoutes(routes)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n      <Switch>\n        <App />\n      </Switch>\n    </BrowserRouter>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}